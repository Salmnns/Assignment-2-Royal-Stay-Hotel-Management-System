# -*- coding: utf-8 -*-
"""classes code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iESBoWd3-FJtbc1bF9Zd16_VQmgzTf69
"""

# Royal Stay Hotel Management System

from enum import Enum
from datetime import datetime, timedelta
import uuid


# ENUMS
class RoomType(Enum):
    """Defines the types of rooms available in the hotel."""
    SINGLE = "Single"
    DOUBLE = "Double"
    SUITE = "Suite"
    DELUXE = "Deluxe"

class Amenity(Enum):
    """Defines the amenities available in the hotel rooms."""
    WIFI = "WiFi"
    TV = "TV"
    AIRCON = "Air Conditioning"
    BALCONY = "Balcony"
    SPA_BATH = "Spa Bath"

class BookingStatus(Enum):
    """Defines the possible statuses of a booking."""
    PENDING = "Pending"
    CONFIRMED = "Confirmed"
    CHECKED_IN = "Checked In"
    CHECKED_OUT = "Checked Out"
    CANCELLED = "Cancelled"

class PaymentMethod(Enum):
    """Defines the payment methods accepted by the hotel."""
    CREDIT_CARD = "Credit Card"
    DEBIT_CARD = "Debit Card"
    MOBILE_WALLET = "Mobile Wallet"
    CASH = "Cash"

class PaymentStatus(Enum):
    """Defines the possible statuses of a payment."""
    PENDING = "Pending"
    COMPLETED = "Completed"
    FAILED = "Failed"
    REFUNDED = "Refunded"

class LoyaltyTier(Enum):
    """Defines the loyalty tiers for the hotel's loyalty program."""
    STANDARD = "Standard"
    SILVER = "Silver"
    GOLD = "Gold"
    PLATINUM = "Platinum"

class ServiceType(Enum):
    """Defines the types of services offered by the hotel."""
    HOUSEKEEPING = "Housekeeping"
    ROOM_SERVICE = "Room Service"
    MAINTENANCE = "Maintenance"
    TRANSPORTATION = "Transportation"

class ServiceStatus(Enum):
    """Defines the possible statuses of a service request."""
    REQUESTED = "Requested"
    ASSIGNED = "Assigned"
    IN_PROGRESS = "In Progress"
    COMPLETED = "Completed"
    CANCELLED = "Cancelled"

class LoyaltyStatus(Enum):
    """Defines the status of a guest's loyalty membership."""
    NONE = "None"
    ACTIVE = "Active"
    INACTIVE = "Inactive"

# GUEST CLASS
class Guest:
    """
    Represents a guest at the Royal Stay Hotel.

    This class stores information about hotel guests including personal details
    and loyalty status.
    """

    def __init__(self, name, email, phone, address):
        """
        Initialize a new Guest object.

        Args:
            name (str): The guest's full name
            email (str): The guest's email address
            phone (str): The guest's phone number
            address (str): The guest's physical address
        """
        self._guest_id = None  # Will be assigned later
        self._name = name
        self._email = email
        self._phone = phone
        self._address = address
        self._loyalty_status = LoyaltyStatus.NONE

    # Getter and setter methods
    def get_guest_id(self):
        return self._guest_id

    def set_guest_id(self, guest_id):
        self._guest_id = guest_id

    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    def get_email(self):
        return self._email

    def set_email(self, email):
        self._email = email

    def get_phone(self):
        return self._phone

    def set_phone(self, phone):
        self._phone = phone

    def get_address(self):
        return self._address

    def set_address(self, address):
        self._address = address

    def get_loyalty_status(self):
        return self._loyalty_status

    def set_loyalty_status(self, loyalty_status):
        self._loyalty_status = loyalty_status

    def update_profile(self, name, email, phone, address):
        self._name = name
        self._email = email
        self._phone = phone
        self._address = address

    def view_reservation_history(self):
        return []

    def request_service(self, service_type, description):
        print(f"Service request for {service_type.value} created: {description}")
        return None  # Would return a Service object in a real implementation

    def __str__(self):
        return f"Guest(ID: {self._guest_id}, Name: {self._name}, Email: {self._email}, " \
               f"Phone: {self._phone}, Loyalty Status: {self._loyalty_status.value})"

# ROOM CLASS
class Room:
    """
    Represents a room in the Royal Stay Hotel.

    This class maintains information about hotel rooms including details
    such as room number, type, amenities, and availability.
    """

    def __init__(self, room_number, room_type, amenities, price_per_night, max_occupancy):
        """
        Initialize a new Room object.
        """
        self._room_number = room_number
        self._room_type = room_type
        self._amenities = amenities
        self._price_per_night = price_per_night
        self._is_available = True
        self._max_occupancy = max_occupancy

    # Getter and setter methods
    def get_room_number(self):
        return self._room_number

    def set_room_number(self, room_number):
        self._room_number = room_number

    def get_room_type(self):
        return self._room_type

    def set_room_type(self, room_type):
        self._room_type = room_type

    def get_amenities(self):
        return self._amenities

    def set_amenities(self, amenities):
        self._amenities = amenities

    def get_price_per_night(self):
        return self._price_per_night

    def set_price_per_night(self, price_per_night):
        self._price_per_night = price_per_night

    def get_is_available(self):
        return self._is_available

    def set_is_available(self, is_available):
        self._is_available = is_available

    def get_max_occupancy(self):
        return self._max_occupancy

    def set_max_occupancy(self, max_occupancy):
        self._max_occupancy = max_occupancy

    def check_availability(self, check_in_date, check_out_date):
        return self._is_available

    def update_availability(self, status):
        self._is_available = status

    def __str__(self):
        amenities_str = ", ".join([amenity.value for amenity in self._amenities])
        return f"Room(Number: {self._room_number}, Type: {self._room_type.value}, " \
               f"Amenities: [{amenities_str}], Price: ${self._price_per_night:.2f}/night, " \
               f"Available: {self._is_available}, Max Occupancy: {self._max_occupancy})"

# BOOKING CLASS
class Booking:
    """
    Represents a booking/reservation in the Royal Stay Hotel.

    This class manages the booking details including guest information,
    room details, dates, and status.
    """

    def __init__(self, guest, room, check_in_date, check_out_date):
        self._booking_id = None
        self._guest = guest
        self._room = room
        self._check_in_date = check_in_date
        self._check_out_date = check_out_date
        self._status = BookingStatus.PENDING
        self._total_amount = 0.0
        # Calculate the initial total amount
        self.calculate_total_amount()

    # Getter and setter methods
    def get_booking_id(self):
        return self._booking_id

    def set_booking_id(self, booking_id):
        self._booking_id = booking_id

    def get_guest(self):
        return self._guest

    def set_guest(self, guest):
        self._guest = guest

    def get_room(self):
        return self._room

    def set_room(self, room):
        self._room = room
        # Recalculate the total amount as the room has changed
        self.calculate_total_amount()

    def get_check_in_date(self):
        return self._check_in_date

    def set_check_in_date(self, check_in_date):
        self._check_in_date = check_in_date
        # Recalculate the total amount as duration may have changed
        self.calculate_total_amount()

    def get_check_out_date(self):
        return self._check_out_date

    def set_check_out_date(self, check_out_date):
        self._check_out_date = check_out_date
        # Recalculate the total amount as duration may have changed
        self.calculate_total_amount()

    def get_status(self):
        return self._status

    def set_status(self, status):
        self._status = status

    def get_total_amount(self):
        return self._total_amount

    def set_total_amount(self, total_amount):
        self._total_amount = total_amount

    def calculate_duration(self):
        delta = self._check_out_date - self._check_in_date
        return delta.days

    def calculate_total_amount(self):
        duration = self.calculate_duration()
        self._total_amount = duration * self._room.get_price_per_night()
        return self._total_amount

    def confirm_booking(self):
        self._status = BookingStatus.CONFIRMED
        self._room.set_is_available(False)
        self.generate_notification()

    def cancel_booking(self):
        if self._status != BookingStatus.CHECKED_IN:
            self._status = BookingStatus.CANCELLED
            self._room.set_is_available(True)
            return True
        return False

    def generate_notification(self):
        """
        Generate and send a notification about the booking status.
        """
        # In a real implementation, this might send an email or SMS
        print(f"Notification: Booking {self._booking_id} has been {self._status.value}.")
        print(f"Room {self._room.get_room_number()} is reserved for {self._guest.get_name()}")
        print(f"Check-in: {self._check_in_date.strftime('%Y-%m-%d')}")
        print(f"Check-out: {self._check_out_date.strftime('%Y-%m-%d')}")
        print(f"Total Amount: ${self._total_amount:.2f}")

    def __str__(self):
        return f"Booking(ID: {self._booking_id}, Guest: {self._guest.get_name()}, " \
               f"Room: {self._room.get_room_number()}, Check-in: {self._check_in_date.strftime('%Y-%m-%d')}, " \
               f"Check-out: {self._check_out_date.strftime('%Y-%m-%d')}, " \
               f"Status: {self._status.value}, Total: ${self._total_amount:.2f})"


# PAYMENT CLASS
class Payment:
    """
    Represents a payment for a booking at the Royal Stay Hotel.

    This class manages payment information including amount, method, and status.
    """

    def __init__(self, booking, amount, payment_method):
        self._payment_id = None
        self._booking = booking
        self._amount = amount
        self._payment_method = payment_method
        self._payment_date = datetime.now()
        self._status = PaymentStatus.PENDING

    # Getter and setter methods
    def get_payment_id(self):
        return self._payment_id

    def set_payment_id(self, payment_id):
        self._payment_id = payment_id

    def get_booking(self):
        return self._booking

    def set_booking(self, booking):
        self._booking = booking

    def get_amount(self):
        return self._amount

    def set_amount(self, amount):
        self._amount = amount

    def get_payment_method(self):
        return self._payment_method

    def set_payment_method(self, payment_method):
        self._payment_method = payment_method

    def get_payment_date(self):
        return self._payment_date

    def set_payment_date(self, payment_date):
        self._payment_date = payment_date

    def get_status(self):
        return self._status

    def set_status(self, status):
        self._status = status

    def process_payment(self):
        try:
            # Simulate successful payment processing
            self._status = PaymentStatus.COMPLETED
            print(f"Payment of ${self._amount:.2f} processed successfully.")
            return True
        except Exception as e:
            # Handle any errors that might occur during payment processing
            self._status = PaymentStatus.FAILED
            print(f"Payment processing failed: {str(e)}")
            return False

    def generate_receipt(self):
        """
        Generate a receipt for this payment.
        """
        receipt = f"Receipt for Payment {self._payment_id}\n"
        receipt += f"Date: {self._payment_date.strftime('%Y-%m-%d %H:%M:%S')}\n"
        receipt += f"Booking ID: {self._booking.get_booking_id()}\n"
        receipt += f"Guest: {self._booking.get_guest().get_name()}\n"
        receipt += f"Amount: ${self._amount:.2f}\n"
        receipt += f"Payment Method: {self._payment_method.value}\n"
        receipt += f"Status: {self._status.value}\n"

        return receipt

    def refund_payment(self):
        """
        Refund this payment.
        """
        if self._status == PaymentStatus.COMPLETED:
            try:
                # Simulate refund processing
                self._status = PaymentStatus.REFUNDED
                print(f"Refund of ${self._amount:.2f} processed successfully.")
                return True
            except Exception as e:
                print(f"Refund processing failed: {str(e)}")
                return False
        else:
            print("Cannot refund a payment that has not been completed.")
            return False

    def __str__(self):
        return f"Payment(ID: {self._payment_id}, Booking: {self._booking.get_booking_id()}, " \
               f"Amount: ${self._amount:.2f}, Method: {self._payment_method.value}, " \
               f"Date: {self._payment_date.strftime('%Y-%m-%d')}, Status: {self._status.value})"

# INVOICE CLASS
class Invoice:
    """
    Represents an invoice for a booking at the Royal Stay Hotel.

    This class manages invoice details including itemized charges, discounts, and totals.
    """

    def __init__(self, booking):
        self._invoice_id = None
        self._booking = booking
        self._issued_date = datetime.now()
        self._due_date = self._issued_date + timedelta(days=7)  # Due in 7 days
        self._itemized_charges = {}  # Dictionary to store itemized charges
        self._discounts = 0.0

        # Add room charge to itemized charges
        room_charge = booking.get_total_amount()
        self._itemized_charges["Room Charge"] = room_charge

    # Getter and setter methods
    def get_invoice_id(self):
        return self._invoice_id

    def set_invoice_id(self, invoice_id):
        self._invoice_id = invoice_id

    def get_booking(self):
        return self._booking

    def set_booking(self, booking):
        self._booking = booking

    def get_issued_date(self):
        return self._issued_date

    def set_issued_date(self, issued_date):
        self._issued_date = issued_date

    def get_due_date(self):
        return self._due_date

    def set_due_date(self, due_date):
        self._due_date = due_date

    def get_itemized_charges(self):
        return self._itemized_charges

    def set_itemized_charges(self, itemized_charges):
        self._itemized_charges = itemized_charges

    def get_discounts(self):
        return self._discounts

    def set_discounts(self, discounts):
        self._discounts = discounts

    def add_charge(self, description, amount):
        self._itemized_charges[description] = amount

    def apply_discount(self, amount):
        self._discounts += amount

    def calculate_total(self):
        """
        Calculate the total amount due on the invoice.
        """
        total = sum(self._itemized_charges.values()) - self._discounts
        return max(0, total)  # Ensure the total is not negative

    def generate_invoice(self):
        """
        Generate a formatted invoice.
        """
        guest = self._booking.get_guest()
        room = self._booking.get_room()

        invoice = f"INVOICE #{self._invoice_id}\n"
        invoice += f"====================\n\n"
        invoice += f"Issued: {self._issued_date.strftime('%Y-%m-%d')}\n"
        invoice += f"Due: {self._due_date.strftime('%Y-%m-%d')}\n\n"

        invoice += f"Guest: {guest.get_name()}\n"
        invoice += f"Room: {room.get_room_number()} ({room.get_room_type().value})\n"
        invoice += f"Check-in: {self._booking.get_check_in_date().strftime('%Y-%m-%d')}\n"
        invoice += f"Check-out: {self._booking.get_check_out_date().strftime('%Y-%m-%d')}\n"
        invoice += f"Duration: {self._booking.calculate_duration()} nights\n\n"

        invoice += f"CHARGES:\n"
        for description, amount in self._itemized_charges.items():
            invoice += f"{description}: ${amount:.2f}\n"

        invoice += f"\nSubtotal: ${sum(self._itemized_charges.values()):.2f}\n"

        if self._discounts > 0:
            invoice += f"Discounts: -${self._discounts:.2f}\n"

        invoice += f"Total Due: ${self.calculate_total():.2f}\n"

        return invoice

    def __str__(self):
        return f"Invoice(ID: {self._invoice_id}, Booking: {self._booking.get_booking_id()}, " \
               f"Issued: {self._issued_date.strftime('%Y-%m-%d')}, " \
               f"Due: {self._due_date.strftime('%Y-%m-%d')}, " \
               f"Total: ${self.calculate_total():.2f})"


# SERVICE CLASS
class Service:
    """
    Represents a service request at the Royal Stay Hotel.

    This class manages service requests from guests for specific rooms.
    """

    def __init__(self, service_type, description, guest, room):
        self._service_id = None
        self._service_type = service_type
        self._description = description
        self._guest = guest
        self._room = room
        self._request_date = datetime.now()
        self._status = ServiceStatus.REQUESTED
        self._staff_assigned = None

    # Getter and setter methods
    def get_service_id(self):
        return self._service_id

    def set_service_id(self, service_id):
        self._service_id = service_id

    def get_service_type(self):
        return self._service_type

    def set_service_type(self, service_type):
        self._service_type = service_type

    def get_description(self):
        return self._description

    def set_description(self, description):
        self._description = description

    def get_guest(self):
        return self._guest

    def set_guest(self, guest):
        self._guest = guest

    def get_room(self):
        return self._room

    def set_room(self, room):
        self._room = room

    def get_request_date(self):
        return self._request_date

    def set_request_date(self, request_date):
        self._request_date = request_date

    def get_status(self):
        return self._status

    def set_status(self, status):
        self._status = status

    def get_staff_assigned(self):
        return self._staff_assigned

    def set_staff_assigned(self, staff_assigned):
        self._staff_assigned = staff_assigned

    def assign_staff(self, staff_member):
        """
        Assign a staff member to handle this service request.
        """
        self._staff_assigned = staff_member
        self._status = ServiceStatus.ASSIGNED
        print(f"Service {self._service_id} assigned to {staff_member}.")

    def update_status(self, status):
        """
        Update the status of this service request.
        """
        self._status = status
        print(f"Service {self._service_id} status updated to {status.value}.")

    def calculate_charge(self):
        """
        Calculate the charge for this service, if applicable.
        """
        # Base charges for different service types
        base_charges = {
            ServiceType.HOUSEKEEPING: 0.0,  # Housekeeping is typically free
            ServiceType.ROOM_SERVICE: 20.0,  # Base charge for room service
            ServiceType.MAINTENANCE: 0.0,  # Maintenance is typically free
            ServiceType.TRANSPORTATION: 25.0  # Base charge for transportation
        }

        return base_charges.get(self._service_type, 0.0)

    def __str__(self):
        return f"Service(ID: {self._service_id}, Type: {self._service_type.value}, " \
               f"Guest: {self._guest.get_name()}, Room: {self._room.get_room_number()}, " \
               f"Status: {self._status.value}, " \
               f"Requested: {self._request_date.strftime('%Y-%m-%d %H:%M')}, " \
               f"Staff: {self._staff_assigned if self._staff_assigned else 'Not assigned'})"


# REVIEW CLASS
class Review:
    """
    Represents a review submitted by a guest for a booking at the Royal Stay Hotel.

    This class manages guest reviews and ratings for their hotel experience.
    """

    def __init__(self, guest, booking, rating, comment):
        self._review_id = None
        self._guest = guest
        self._booking = booking
        self._rating = rating
        self._comment = comment
        self._review_date = datetime.now()

        # Validate the rating
        self.validate_rating(rating)

    # Getter and setter methods
    def get_review_id(self):
        return self._review_id

    def set_review_id(self, review_id):
        self._review_id = review_id

    def get_guest(self):
        return self._guest

    def set_guest(self, guest):
        self._guest = guest

    def get_booking(self):
        return self._booking

    def set_booking(self, booking):
        self._booking = booking

    def get_rating(self):
        return self._rating

    def set_rating(self, rating):
        """
        Set the rating after validation.
        """
        if self.validate_rating(rating):
            self._rating = rating

    def get_comment(self):
        return self._comment

    def set_comment(self, comment):
        self._comment = comment

    def get_review_date(self):
        return self._review_date

    def set_review_date(self, review_date):
        self._review_date = review_date

    def validate_rating(self, rating):
        """
        Validate that the rating is between 1 and 5.
        """
        if not isinstance(rating, int) or rating < 1 or rating > 5:
            raise ValueError("Rating must be an integer between 1 and 5")
        return True

    def __str__(self):
        return f"Review(ID: {self._review_id}, Guest: {self._guest.get_name()}, " \
               f"Booking: {self._booking.get_booking_id()}, Rating: {self._rating}/5, " \
               f"Date: {self._review_date.strftime('%Y-%m-%d')}, " \
               f"Comment: {self._comment[:30]}{'...' if len(self._comment) > 30 else ''})"

# LOYALTY PROGRAM CLASS
class LoyaltyProgram:
    """
    Represents a loyalty program for a guest at the Royal Stay Hotel.

    This class manages loyalty points, tier status, and rewards for hotel guests.
    """

    def __init__(self, guest):
        self._guest = guest
        self._points_earned = 0
        self._points_redeemed = 0
        self._current_tier = LoyaltyTier.STANDARD
        self._member_since = datetime.now()
        self._last_activity = datetime.now()

    # Getter and setter methods
    def get_guest(self):
        return self._guest

    def set_guest(self, guest):
        self._guest = guest

    def get_points_earned(self):
        return self._points_earned

    def set_points_earned(self, points_earned):
        self._points_earned = points_earned
        self.update_tier()  # Update tier based on new points

    def get_points_redeemed(self):
        return self._points_redeemed

    def set_points_redeemed(self, points_redeemed):
        self._points_redeemed = points_redeemed

    def get_current_tier(self):
        return self._current_tier

    def set_current_tier(self, current_tier):
        self._current_tier = current_tier

    def get_member_since(self):
        return self._member_since

    def set_member_since(self, member_since):
        self._member_since = member_since

    def get_last_activity(self):
        return self._last_activity

    def set_last_activity(self, last_activity):
        self._last_activity = last_activity

    def earn_points(self, booking):
        """
        Earn points for a booking.
        """
        # Calculate points based on booking total amount
        # For example, 1 point per dollar spent
        points = int(booking.get_total_amount())

        # Apply tier multiplier
        if self._current_tier == LoyaltyTier.SILVER:
            points = int(points * 1.25)  # 25% bonus for Silver
        elif self._current_tier == LoyaltyTier.GOLD:
            points = int(points * 1.5)   # 50% bonus for Gold
        elif self._current_tier == LoyaltyTier.PLATINUM:
            points = int(points * 2.0)   # 100% bonus for Platinum

        self._points_earned += points
        self._last_activity = datetime.now()
        self.update_tier()  # Update tier based on new points

        print(f"{self._guest.get_name()} earned {points} loyalty points.")
        return points

    def redeem_points(self, points):
        """
        Redeem loyalty points for rewards.
        """
        available_points = self.calculate_available_points()

        if points <= available_points:
            self._points_redeemed += points
            self._last_activity = datetime.now()

            # Calculate the value of redeemed points (e.g., $0.10 per point)
            value = points * 0.1

            print(f"{self._guest.get_name()} redeemed {points} points for ${value:.2f} value.")
            return True
        else:
            print(f"Insufficient points. Available: {available_points}, Requested: {points}")
            return False

    def calculate_available_points(self):
        return max(0, self._points_earned - self._points_redeemed)

    def update_tier(self):
        available_points = self.calculate_available_points()

        if available_points >= 10000:
            new_tier = LoyaltyTier.PLATINUM
        elif available_points >= 5000:
            new_tier = LoyaltyTier.GOLD
        elif available_points >= 1000:
            new_tier = LoyaltyTier.SILVER
        else:
            new_tier = LoyaltyTier.STANDARD

        # Update tier if changed
        if new_tier != self._current_tier:
            old_tier = self._current_tier
            self._current_tier = new_tier
            print(f"{self._guest.get_name()}'s loyalty tier updated from {old_tier.value} to {new_tier.value}.")

    def __str__(self):
        return f"LoyaltyProgram(Guest: {self._guest.get_name()}, " \
               f"Points Earned: {self._points_earned}, Points Redeemed: {self._points_redeemed}, " \
               f"Available Points: {self.calculate_available_points()}, " \
               f"Tier: {self._current_tier.value}, Member Since: {self._member_since.strftime('%Y-%m-%d')})"